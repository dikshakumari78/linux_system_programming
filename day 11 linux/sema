#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/sem.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/wait.h>

#define SHM_SIZE 1024

void sem_wait(int semid) {
    struct sembuf sops = {0, -1, 0};
    semop(semid, &sops, 1);
}

void sem_signal(int semid) {
    struct sembuf sops = {0, 1, 0};
    semop(semid, &sops, 1);
}

int main() {
    key_t key = ftok("semfile", 65);
    int semid = semget(key, 1, 0666 | IPC_CREAT);
    if (semid == -1) {
        perror("semget");
        exit(EXIT_FAILURE);
    }

    semctl(semid, 0, SETVAL, 1); // Initialize semaphore to 1

    key_t shm_key = ftok("shmfile", 66);
    int shmid = shmget(shm_key, SHM_SIZE, 0666 | IPC_CREAT);
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    char* shm_ptr = (char*) shmat(shmid, NULL, 0);
    if (shm_ptr == (char*) -1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        sem_wait(semid); // Wait for semaphore
        snprintf(shm_ptr, SHM_SIZE, "Hello from child");
        printf("Child wrote to shared memory\n");
        sem_signal(semid); // Signal semaphore
        shmdt(shm_ptr); // Detach shared memory
    } else { // Parent process
        sem_wait(semid); // Wait for semaphore
        printf("Parent read from shared memory: %s\n", shm_ptr);
        sem_signal(semid); // Signal semaphore
        wait(NULL); 
        shmdt(shm_ptr); 
        shmctl(shmid, IPC_RMID, NULL); 
        semctl(semid, 0, IPC_RMID); 
    }

    return 0;
}
