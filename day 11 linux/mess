#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define MSG_SIZE 100

struct msg_buffer {
    long msg_type;
    char msg_text[MSG_SIZE];
};

int main() {
    key_t key = ftok("msgfile", 65); // Generate a unique key
    int msgid = msgget(key, 0666 | IPC_CREAT); // Create message queue
    if (msgid == -1) {
        perror("msgget");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        struct msg_buffer msg;
        msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0); 
        printf("Child received: %s\n", msg.msg_text);
    } else { // Parent process
        struct msg_buffer msg;
        msg.msg_type = 1;
        strcpy(msg.msg_text, "Hello from parent");
        msgsnd(msgid, &msg, sizeof(msg.msg_text), 0);
        wait(NULL); 
        msgctl(msgid, IPC_RMID, NULL); 
    }

    return 0;
}
