#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int pipefd1[2], pipefd2[2];  // Two pipes for bidirectional communication

    if (pipe(pipefd1) == -1 || pipe(pipefd2) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        close(pipefd1[1]); // Close write end of pipe 1
        close(pipefd2[0]); // Close read end of pipe 2

        char buffer[100];
        read(pipefd1[0], buffer, sizeof(buffer));
        printf("Child read: %s\n", buffer);

        const char* msg = "Hello from child!";
        write(pipefd2[1], msg, strlen(msg) + 1);

        close(pipefd1[0]);
        close(pipefd2[1]);
    } else { // Parent process
        close(pipefd1[0]); 
        close(pipefd2[1]); 
        const char* msg = "Hello from parent!";
        write(pipefd1[1], msg, strlen(msg) + 1);

        char buffer[100];
        read(pipefd2[0], buffer, sizeof(buffer));
        printf("Parent read: %s\n", buffer);

        close(pipefd1[1]);
        close(pipefd2[0]);
        wait(NULL); // Wait for child to finish
    }

    return 0;
}
