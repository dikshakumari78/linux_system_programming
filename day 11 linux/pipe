#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    int pipefd[2];  // file descriptors for the pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        close(pipefd[1]); // Close the write end
        char buffer[100];
        read(pipefd[0], buffer, sizeof(buffer));
        printf("Child read: %s\n", buffer);
        close(pipefd[0]);
    } else { // Parent process
        close(pipefd[0]); // Close the read end
        const char* msg = "Hello from parent!";
        write(pipefd[1], msg, sizeof(msg));
        close(pipefd[1]);
        wait(NULL); // Wait for child to finish
    }

    return 0;
}
