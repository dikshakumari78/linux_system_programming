#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>

#define SHM_SIZE 1024

int main() {
    key_t key = ftok("shmfile", 65); // Generate a unique key
    int shmid = shmget(key, SHM_SIZE, 0666 | IPC_CREAT); // Create shared memory segment
    if (shmid == -1) {
        perror("shmget");
        exit(EXIT_FAILURE);
    }

    char* shm_ptr = (char*) shmat(shmid, NULL, 0); // Attach shared memory
    if (shm_ptr == (char*) -1) {
        perror("shmat");
        exit(EXIT_FAILURE);
    }

    pid_t pid = fork();
    if (pid == -1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (pid == 0) { // Child process
        snprintf(shm_ptr, SHM_SIZE, "Hello from child");
        printf("Child wrote to shared memory\n");
        shmdt(shm_ptr); // Detach shared memory
    } else { // Parent process
        wait(NULL); // Wait for child to finish
        printf("Parent read from shared memory: %s\n", shm_ptr);
        shmdt(shm_ptr); // Detach shared memory
        shmctl(shmid, IPC_RMID, NULL); // Remove shared memory segment
    }

    return 0;
}
