#include <iostream>
#include <fcntl.h>
#include <sys/mman.h>
#include <unistd.h>
#include <cstring>
#include <semaphore.h>
#include <cerrno>
#include "common.h"

int main() {
    // Open shared memory
    int shm_fd = shm_open(SHARED_MEMORY_NAME, O_CREAT | O_RDWR, 0666);
    if (shm_fd == -1) {
        std::cerr << "Error opening shared memory: " << strerror(errno) << std::endl;
        return 1;
    }

    // Set size of shared memory
    if (ftruncate(shm_fd, sizeof(SharedMemory)) == -1) {
        std::cerr << "Error setting size of shared memory: " << strerror(errno) << std::endl;
        close(shm_fd);
        return 1;
    }

    // Map shared memory
    SharedMemory *shared_memory = (SharedMemory *)mmap(nullptr, sizeof(SharedMemory), PROT_READ | PROT_WRITE, MAP_SHARED, shm_fd, 0);
    if (shared_memory == MAP_FAILED) {
        std::cerr << "Error mapping shared memory: " << strerror(errno) << std::endl;
        close(shm_fd);
        return 1;
    }

    // Initialize semaphores
    sem_t *sem1 = sem_open(SEMAPHORE1_NAME, O_CREAT | O_EXCL, 0666, 1);
    sem_t *sem2 = sem_open(SEMAPHORE2_NAME, O_CREAT | O_EXCL, 0666, 0);
    if (sem1 == SEM_FAILED || sem2 == SEM_FAILED) {
        std::cerr << "Error opening semaphores: " << strerror(errno) << std::endl;
        munmap(shared_memory, sizeof(SharedMemory));
        close(shm_fd);
        return 1;
    }

    // Initialize shared memory
    shared_memory->process1_turn = true;

    while (true) {
        // Wait for process1_turn to be true
        sem_wait(sem1);
        if (!shared_memory->process1_turn) {
            sem_post(sem1);
            continue;
        }

        // Write message to shared memory
        std::cout << "Process1, enter a message: ";
        std::cin.getline(shared_memory->buffer, MAX_SIZE);
        shared_memory->process1_turn = false;

        // Signal process 2
        sem_post(sem2);

        if (strcmp(shared_memory->buffer, "exit") == 0) break;
    }

    // Clean up
    munmap(shared_memory, sizeof(SharedMemory));
    close(shm_fd);
    sem_close(sem1);
    sem_close(sem2);
    sem_unlink(SEMAPHORE1_NAME);
    sem_unlink(SEMAPHORE2_NAME);
    shm_unlink(SHARED_MEMORY_NAME);

    return 0;
}
