#include <iostream>
#include <mqueue.h>
#include <cstring>
#include <cstdlib>
#include <cerrno>
#include <cstdio>
#include "common.h"

int main() {
    mqd_t mq1, mq2;
    struct mq_attr attr;
    char buffer[MAX_SIZE];

    // Initialize the queue attributes
    attr.mq_flags = 0;
    attr.mq_maxmsg = 10;
    attr.mq_msgsize = MAX_SIZE;
    attr.mq_curmsgs = 0;

    // Create the message queues
    mq1 = mq_open(QUEUE_NAME1, O_CREAT | O_WRONLY, 0644, &attr);
    mq2 = mq_open(QUEUE_NAME2, O_CREAT | O_RDONLY, 0644, &attr);
    if (mq1 == -1 || mq2 == -1) {
        std::cerr << "Error creating queues: " << strerror(errno) << std::endl;
        exit(1);
    }

    while (true) {
        // Send a message
        std::cout << "Process1, enter a message: ";
        std::cin.getline(buffer, MAX_SIZE);
        if (mq_send(mq1, buffer, strlen(buffer) + 1, 0) == -1) {
            std::cerr << "Error sending message: " << strerror(errno) << std::endl;
            exit(1);
        }

        if (strcmp(buffer, MSG_STOP) == 0) break;

        // Receive a message
        ssize_t bytes_read = mq_receive(mq2, buffer, MAX_SIZE, nullptr);
        if (bytes_read == -1) {
            std::cerr << "Error receiving message: " << strerror(errno) << std::endl;
            exit(1);
        }
        buffer[bytes_read] = '\0';
        std::cout << "Process1 received: " << buffer << std::endl;
    }

    // Close and unlink the message queues
    mq_close(mq1);
    mq_close(mq2);
    mq_unlink(QUEUE_NAME1);
    mq_unlink(QUEUE_NAME2);

    return 0;
}
