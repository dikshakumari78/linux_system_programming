#include <iostream>
#include <cstdlib>
#include <csignal>
#include <unistd.h>
#include <cstring>
#include <arpa/inet.h>
#include <openssl/ssl.h>
#include <openssl/err.h>

const char* SERVER_ADDRESS = "127.0.0.1";
const int PORT = 8080;
bool sigint_or_sigterm_received = false;
void signal_handler(int signum) {
    if (signum == SIGINT || signum == SIGTERM) {
        sigint_or_sigterm_received = true;
    }
}

SSL_CTX* create_client_context() {
    const SSL_METHOD* method;
    SSL_CTX* ctx;
    SSL_library_init();
    OpenSSL_add_all_algorithms();
    SSL_load_error_strings();
    method = SSLv23_client_method();
    ctx = SSL_CTX_new(method);
    if (!ctx) {
        perror("Unable to create SSL context");
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }

    return ctx;
}

void run_client(SSL_CTX* ctx) {
    int client_fd;
    struct sockaddr_in serv_addr;
    if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("socket creation failed");
        exit(EXIT_FAILURE);
    }
    memset(&serv_addr, '0', sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, SERVER_ADDRESS, &serv_addr.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        exit(EXIT_FAILURE);
    }
    if (connect(client_fd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection Failed");
        exit(EXIT_FAILURE);
    }
    SSL* ssl = SSL_new(ctx);
    SSL_set_fd(ssl, client_fd);
    if (SSL_connect(ssl) <= 0) {
        ERR_print_errors_fp(stderr);
        exit(EXIT_FAILURE);
    }
 const char* message = "Hello ";
    SSL_write(ssl, message, strlen(message));
    char buffer[1024];
    int valread = SSL_read(ssl, buffer, sizeof(buffer)-1);
    buffer[valread] = '\0';
    printf("Server: %s\n", buffer);
SSL_shutdown(ssl);
    SSL_free(ssl);
    close(client_fd);
    std::cout << "Client closed." << std::endl;
}

int main() {
    signal(SIGINT, signal_handler);
    signal(SIGTERM, signal_handler);
    SSL_CTX* ctx = create_client_context();
    run_client(ctx);
    SSL_CTX_free(ctx);
return 0;
}
