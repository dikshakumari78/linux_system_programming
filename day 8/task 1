#include <iostream>
#include <cstring>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

const int SERVER_PORT = 8080;

int main() {
    int server_sock = socket(AF_INET, SOCK_STREAM, 0);
    if (server_sock < 0) {
        std::cerr << "Socket creation failed: " << strerror(errno) << std::endl;
        return 1;
    }

    struct sockaddr_in server_addr;
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(SERVER_PORT);

    if (bind(server_sock, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "Bind failed: " << strerror(errno) << std::endl;
        close(server_sock);
        return 1;
    }

    if (listen(server_sock, 1) < 0) {
        std::cerr << "Listen failed: " << strerror(errno) << std::endl;
        close(server_sock);
        return 1;
    }

    std::cout << "Server listening on port " << SERVER_PORT << "..." << std::endl;

    struct sockaddr_in client_addr;
    socklen_t client_addr_len = sizeof(client_addr);
    int client_sock = accept(server_sock, (struct sockaddr*)&client_addr, &client_addr_len);
    if (client_sock < 0) {
        std::cerr << "Accept failed: " << strerror(errno) << std::endl;
        close(server_sock);
        return 1;
    }

    char buffer[1024] = {0};
    int bytes_received = recv(client_sock, buffer, sizeof(buffer) - 1, 0);
    if (bytes_received < 0) {
        std::cerr << "Receive failed: " << strerror(errno) << std::endl;
        close(client_sock);
        close(server_sock);
        return 1;
    }

    std::cout << "Received message: " << buffer << std::endl;

    close(client_sock);
    close(server_sock);
    return 0;
}
