#include <iostream>
#include <csignal>
#include <unistd.h>
#include <cstring>

volatile sig_atomic_t alarm_count = 0;

void signal_handler(int signal) {
    if (signal == SIGALRM) {
        alarm_count++;
        std::cout << "Received SIGALRM: Alarm count = " << alarm_count << std::endl;
        alarm(5); // Set the next alarm
    } else if (signal == SIGINT) {
        std::cout << "Received SIGINT: Ignoring..." << std::endl;
    } else if (signal == SIGTERM) {
        std::cout << "Received SIGTERM: Default action." << std::endl;
        std::signal(SIGTERM, SIG_DFL); // Restore default behavior
        raise(SIGTERM); // Re-raise the signal
    }
}

int main() {
    struct sigaction sa;
    std::memset(&sa, 0, sizeof(sa));
    sa.sa_handler = signal_handler;

    // Set up signal handlers
    sigaction(SIGALRM, &sa, nullptr);
    sigaction(SIGINT, &sa, nullptr);
    sigaction(SIGTERM, &sa, nullptr);

    std::cout << "Starting the alarm. The first alarm will ring in 5 seconds." << std::endl;
    alarm(5); // Schedule the first alarm in 5 seconds

    while (true) {
        pause(); // Wait for signals
    }

    return 0;
}
