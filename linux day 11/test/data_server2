#include <iostream>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <cstring>
#include <cstdlib>

#define PORT 8080
#define BUFFER_SIZE 1024
#define NUM_WORKERS 3

void fork_workers(int pipefd[2]);

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

    // Create socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Define the address
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the address
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    std::cout << "Server is listening on port " << PORT << "..." << std::endl;

    // Accept incoming connections
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    std::cout << "Connection accepted" << std::endl;

    // Create a pipe for communication with workers
    int pipefd[2];
    if (pipe(pipefd) == -1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    // Fork worker processes
    fork_workers(pipefd);

    // Main loop to read data and send it to workers
    while (true) {
        int valread = read(new_socket, buffer, BUFFER_SIZE);
        if (valread == 0) {
            std::cout << "Client disconnected" << std::endl;
            break;
        }
        buffer[valread] = '\0'; // Null-terminate the buffer
        std::cout << "Received: " << buffer << std::endl;

        // Send the data to workers via the pipe
        write(pipefd[1], buffer, strlen(buffer) + 1);
    }

    close(new_socket);
    close(server_fd);
    return 0;
}

void fork_workers(int pipefd[2]) {
    for (int i = 0; i < NUM_WORKERS; ++i) {
        pid_t pid = fork();
        if (pid < 0) {
            perror("fork");
            exit(EXIT_FAILURE);
        }
        if (pid == 0) { // Child process
            close(pipefd[1]); // Close the write end of the pipe
            char buffer[BUFFER_SIZE];
            while (true) {
                int bytes_read = read(pipefd[0], buffer, BUFFER_SIZE);
                if (bytes_read <= 0) {
                    break;
                }
                buffer[bytes_read] = '\0';
                std::cout << "Worker " << i << " processing data: " << buffer << std::endl;
          }
            close(pipefd[0]);
            _exit(0);
        }
    }
    close(pipefd[0]);
}
