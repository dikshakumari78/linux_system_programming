
#include <iostream>
#include <csignal>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>
#include <arpa/inet.h> // Include for inet_pton

#define PORT 8080
#define BUFFER_SIZE 1024
void signal_handler(int signal) {
    if (signal == SIGPIPE) {
        std::cerr << "SIGPIPE received. Connection might be broken." << std::endl;
        exit(EXIT_FAILURE);
    }
}

int main() {
    int sock = 0;
    struct sockaddr_in serv_addr;
    char buffer[BUFFER_SIZE] = {0};
    const char *message = "Hello from client";
    signal(SIGPIPE, signal_handler);
    if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        perror("Socket creation error");
        return -1;
    }

    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htons(PORT);
    if (inet_pton(AF_INET, "127.0.0.1", &serv_addr.sin_addr) <= 0) {
        perror("Invalid address / Address not supported");
        close(sock);
        return -1;
    }
    if (connect(sock, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0) {
        perror("Connection failed");
        close(sock);
        return -1;
    }
    send(sock, message, strlen(message), 0);
    std::cout << "Message sent to server: " << message << std::endl;
    int valread = read(sock, buffer, BUFFER_SIZE);
    if (valread > 0) {
        buffer[valread] = '\0';
        std::cout << "Message received from server: " << buffer << std::endl;
    } else if (valread < 0) {
        perror("Read error");
    }

    close(sock);

    return 0;
}
