#include <iostream>
#include <csignal>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <cstring>
#include <cstdlib>

#define PORT 8080
#define BUFFER_SIZE 1024

bool running = true; 
void signal_handler(int signal) {
    if (signal == SIGINT) {
        std::cout << "SIGINT received. Shutting down gracefully..." << std::endl;
        running = false;
    }
}

int main() {
    int server_fd, new_socket;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[BUFFER_SIZE] = {0};

  signal(SIGINT, signal_handler);

  if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("bind failed");
        close(server_fd);
        exit(EXIT_FAILURE);
    }
    if (listen(server_fd, 3) < 0) {
        perror("listen");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    std::cout << "Server is listening on port " << PORT << "..." << std::endl;
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("accept");
        close(server_fd);
        exit(EXIT_FAILURE);
    }

    std::cout << "Connection accepted" << std::endl;
    while (running) {
        int valread = read(new_socket, buffer, BUFFER_SIZE);
        if (valread == 0) {
            std::cout << "Client disconnected" << std::endl;
            break;
        }
        buffer[valread] = '\0';
        std::cout << "Received: " << buffer << std::endl;
        send(new_socket, buffer, strlen(buffer), 0);
        std::cout << "Message echoed back to client" << std::endl;
    }

    close(new_socket);
    close(server_fd);
    std::cout << "Server shutdown complete." << std::endl;

    return 0;
}
