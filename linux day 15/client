#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define BUFFER_SIZE 1024 // Buffer size for sending and receiving messages

int main() {
    int sockfd;
    struct sockaddr_in server_addr;
    char buffer[BUFFER_SIZE];
    std::string server_ip;
    int server_port;
    socklen_t server_len = sizeof(server_addr);

    // Create a UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        std::cerr << "Error creating socket" << std::endl;
        return 1;
    }

    // Allow the user to input the serverâ€™s IP address and port number
    std::cout << "Enter server IP address: ";
    std::cin >> server_ip;
    std::cout << "Enter server port number: ";
    std::cin >> server_port;

    // Set up the server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_port = htons(server_port);
    if (inet_pton(AF_INET, server_ip.c_str(), &server_addr.sin_addr) <= 0) {
        std::cerr << "Invalid IP address" << std::endl;
        close(sockfd);
        return 1;
    }

    // Send a predefined message to the server
    const char* msg = "Hello, Server!";
    ssize_t sent_len = sendto(sockfd, msg, strlen(msg), 0, 
                              (struct sockaddr*)&server_addr, sizeof(server_addr));
    if (sent_len < 0) {
        std::cerr << "Error sending data" << std::endl;
        close(sockfd);
        return 1;
    }

    // Wait for an acknowledgment from the server
    ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE - 1, 0, 
                                (struct sockaddr*)&server_addr, &server_len);
    if (recv_len < 0) {
        std::cerr << "Error receiving data" << std::endl;
        close(sockfd);
        return 1;
    }
    buffer[recv_len] = '\0';
    std::cout << "Received acknowledgment: " << buffer << std::endl;

    close(sockfd);
    return 0;
}
