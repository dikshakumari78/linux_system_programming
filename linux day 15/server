#include <iostream>
#include <cstring>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

#define PORT 12345       
#define BUFFER_SIZE 1024 
int main() {
    int sockfd;
    char buffer[BUFFER_SIZE];
    struct sockaddr_in server_addr, client_addr;
    socklen_t client_len = sizeof(client_addr);

    // Create a UDP socket
    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd < 0) {
        std::cerr << "Error creating socket" << std::endl;
        return 1;
    }

    // Set up the server address struct
    memset(&server_addr, 0, sizeof(server_addr));
    server_addr.sin_family = AF_INET;
    server_addr.sin_addr.s_addr = INADDR_ANY;
    server_addr.sin_port = htons(PORT);

    // Bind the socket to the specified port
    if (bind(sockfd, (struct sockaddr*)&server_addr, sizeof(server_addr)) < 0) {
        std::cerr << "Bind failed" << std::endl;
        close(sockfd);
        return 1;
    }

    std::cout << "Server listening on port " << PORT << std::endl;

    while (true) {
        // Receive a message from the client
        ssize_t recv_len = recvfrom(sockfd, buffer, BUFFER_SIZE - 1, 0, 
                                    (struct sockaddr*)&client_addr, &client_len);
        if (recv_len < 0) {
            std::cerr << "Error receiving data" << std::endl;
            close(sockfd);
            return 1;
        }

        // Null-terminate the received message
        buffer[recv_len] = '\0';
        std::cout << "Received message: " << buffer << std::endl;
        std::cout << "Client address: " << inet_ntoa(client_addr.sin_addr) << std::endl;
        std::cout << "Client port: " << ntohs(client_addr.sin_port) << std::endl;
        const char* ack_msg = "Message received";
        ssize_t sent_len = sendto(sockfd, ack_msg, strlen(ack_msg), 0, 
                                  (struct sockaddr*)&client_addr, client_len);
        if (sent_len < 0) {
            std::cerr << "Error sending acknowledgment" << std::endl;
            close(sockfd);
            return 1;
        }
    }
    close(sockfd);
    return 0;
}
