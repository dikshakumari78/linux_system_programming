#include <iostream>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <cstring>

int main() {
    int pipefd[2]; // pipefd[0] is for reading, pipefd[1] is for writing

    // Create a pipe
    if (pipe(pipefd) == -1) {
        perror("pipe");
        return 1;
    }

    pid_t pid = fork();

    if (pid < 0) {
        // Fork failed
        perror("fork");
        return 1;
    } else if (pid == 0) {
        // Child process
        close(pipefd[1]); // Close unused write end

        char buffer[128];
        ssize_t bytesRead = read(pipefd[0], buffer, sizeof(buffer) - 1);
        if (bytesRead > 0) {
            buffer[bytesRead] = '\0'; // Null-terminate the string
            std::cout << "Child Process received: " << buffer << std::endl;
        } else {
            perror("read");
        }

        close(pipefd[0]); // Close read end
    } else {
        // Parent process
        close(pipefd[0]); // Close unused read end

        const char* message = "Hello from parent process!";
        write(pipefd[1], message, strlen(message));

        close(pipefd[1]); // Close write end

        // Wait for child process to finish
        wait(nullptr);
    }

    return 0;
}
