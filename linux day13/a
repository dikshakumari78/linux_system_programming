#include <iostream>
#include <fcntl.h>
#include <unistd.h>
#include <sys/stat.h>
#include <vector>
#include <string>
#include <algorithm>
#include <cstring>
#include <sstream>

ssize_t readLine(int fd, std::string& line) {
    char ch;
    line.clear();
    ssize_t bytesRead;
    while ((bytesRead = read(fd, &ch, 1)) > 0) {
        if (ch == '\n') break;
        line += ch;
    }
    return bytesRead;
}

void mergeSortedFiles(const char* file1, const char* file2, const char* outputFile) {
    int fd1 = open(file1, O_RDONLY);
    if (fd1 < 0) {
        perror("Error opening first input file");
        return;
    }

    int fd2 = open(file2, O_RDONLY);
    if (fd2 < 0) {
        perror("Error opening second input file");
        close(fd1);
        return;
    }

    int out_fd = open(outputFile, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH);
    if (out_fd < 0) {
        perror("Error opening output file");
        close(fd1);
        close(fd2);
        return;
    }

    std::string line1, line2;
    bool hasLine1 = readLine(fd1, line1) > 0;
    bool hasLine2 = readLine(fd2, line2) > 0;

    while (hasLine1 || hasLine2) {
        if (!hasLine1) {
            write(out_fd, line2.c_str(), line2.size());
            write(out_fd, "\n", 1);
            hasLine2 = readLine(fd2, line2) > 0;
        } else if (!hasLine2) {
            write(out_fd, line1.c_str(), line1.size());
            write(out_fd, "\n", 1);
            hasLine1 = readLine(fd1, line1) > 0;
        } else {
            if (line1 <= line2) {
                write(out_fd, line1.c_str(), line1.size());
                write(out_fd, "\n", 1);
                hasLine1 = readLine(fd1, line1) > 0;
            } else {
                write(out_fd, line2.c_str(), line2.size());
                write(out_fd, "\n", 1);
                hasLine2 = readLine(fd2, line2) > 0;
            }
        }
    }

    close(fd1);
    close(fd2);
    close(out_fd);
}

int main(int argc, char* argv[]) {
    if (argc != 4) {
        std::cerr << "Usage: " << argv[0] << " <sorted file 1> <sorted file 2> <output file>" << std::endl;
        return 1;
    }

    mergeSortedFiles(argv[1], argv[2], argv[3]);

    return 0;
}
